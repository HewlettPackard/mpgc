/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
 * meta.h
 *
 *  Created on: Oct 6, 2013
 *      Author: evank
 */

#ifndef META_H_
#define META_H_

#include <type_traits>
#include <functional>

namespace meta {

  template <typename A, typename T>
  using rebind_alloc_t = typename A::template rebind<T>::other;

  template <bool b> class exists_if;
  template <> class exists_if<true> {};

  template <typename T>
  struct is_iterator {
    template <typename U>
    static char set(typename std::iterator_traits<U>::pointer* x);

    template <typename U>
    static long test(U* x);
    
    constexpr static bool value = std::is_same<decltype(test<std::decay_t<T>>(nullptr)), char>::value;
  };

  template <typename, typename, typename = void>
  struct _is_callable_base : std::false_type {};

  template <typename Sig, typename R1>
  struct _is_callable_base<Sig, R1, std::enable_if_t<std::is_assignable<R1&, std::result_of_t<Sig>>::value>>
    : std::true_type
  {};

  template <typename Fn, typename R = void> struct is_callable;
  template <typename Fn, typename ... Args, typename R>
  struct is_callable<Fn(Args...), R> : _is_callable_base<Fn(Args...), R> {};
  
  template <typename T>
  struct as_function : public as_function<decltype(&T::operator())>
  {};

  template <typename RT, typename...AT>
  struct as_function<RT(AT...)> {
    using type = std::function<RT(AT...)>;
  };

  template <typename RT, typename...AT>
  struct as_function<RT(*)(AT...)> : as_function<RT(AT...)> {};

  template <typename RT, typename...AT>
  struct as_function<RT(&)(AT...)> : as_function<RT(AT...)> {};

  template <typename C, typename RT, typename...AT>
  struct as_function<RT(C::*)(AT...) const> : as_function<RT(const C &, AT...)> {};

  template <typename C, typename RT, typename...AT>
  struct as_function<RT(C::*)(AT...)> : as_function<RT(C &, AT...)> {};

  template <typename C, typename T>
  struct as_function<T C::*> : as_function<T(C &)> {};

  template <typename C, typename T>
  struct as_function<T C::* const> : as_function<T(const C &)> {};

  template <typename T>
  using as_function_t = typename as_function<T>::type;

}





#endif /* META_H_ */
