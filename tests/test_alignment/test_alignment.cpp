/*
 *
 *  Multi Process Garbage Collector
 *  Copyright Â© 2016 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the 
 *  Application containing code generated by the Library and added to the 
 *  Application during this compilation process under terms of your choice, 
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include <typeinfo>
#include <random>
#include <iostream>
#include "mpgc/gc.h"

using namespace mpgc;
using namespace std;

struct alignas(16) big {
  size_t low = 0;
  size_t high = 0;
  
  static const auto &descriptor() {
    using this_type = big;
    static gc_descriptor d =
      GC_DESC(this_type)
      .template WITH_FIELD(&this_type::low)
      .template WITH_FIELD(&this_type::high)
      ;
    return d;
  }
};

struct alsoBig : gc_allocated {
  size_t _pad;
  big _big;
  bool _b = false;
  size_t _pad2;
  alsoBig(gc_token &gc) : gc_allocated{gc} {}
  static const auto &descriptor() {
    using this_type = alsoBig;
    static gc_descriptor d =
      GC_DESC(this_type)
      .template WITH_FIELD(&this_type::_pad)
      .template WITH_FIELD(&this_type::_big)
      .template WITH_FIELD(&this_type::_b)
      .template WITH_FIELD(&this_type::_pad2)
      ;
    return d;
  }
};

struct small : gc_allocated {
  size_t a = 0;
  size_t b = 0;;
  small(gc_token &gc) : gc_allocated{gc} {}
  static const auto &descriptor() {
    using this_type = small;
    static gc_descriptor d =
      GC_DESC(this_type)
      .template WITH_FIELD(&this_type::a)
      .template WITH_FIELD(&this_type::b)
      ;
    return d;
  }
};

template <typename T>
void describe() {
  cout << typeid(T).name()
       << ": size = " << sizeof(T)
       << ", alignment = " << alignof(T)
       << endl;
}

template <typename T>
void testAlignment() {
  gc_ptr<T> p = make_gc<T>();
  T *bp = p.as_bare_pointer();
  size_t addr = reinterpret_cast<size_t>(bp);
  
  if (addr % alignof(T) != 0) {
    cout << endl;
    cout << "Bad alignment for " << typeid(T).name() << endl;
    cout << "        Should be " << alignof(T) << endl;
    cout << "              Got " << p << endl;
    cout << "                  " << bp << endl;
  }
  
  assert(addr % alignof(T) == 0);
}

int main() {
  describe<big>();
  describe<alsoBig>();
  describe<small>();

  random_device rd;
  mt19937 gen(rd());
  bernoulli_distribution d;
  int n_iters = 10000;
  int tick = 100;

  for (int i=1; i<=n_iters; i++) {
    if (d(gen)) {
      testAlignment<alsoBig>();
    } else {
      testAlignment<small>();
    }
    if ((i % tick) == 0) {
      cout << i << " " << flush;
    }
  }
  cout << endl;
  
}
